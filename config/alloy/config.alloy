discovery.docker "linux" {
    host = "unix:///var/run/docker.sock"
}

discovery.relabel "docker_logs" {
    targets = discovery.docker.linux.targets

    rule {
        source_labels = ["__meta_docker_container_name"]
        regex = "/(.+?)-(.+)"
        replacement = "$1"
        target_label  = "project"
    }

    rule {
        source_labels = ["__meta_docker_container_name"]
        regex = "/(.+?)-(.+)"
        replacement = "$2"
        target_label  = "container"
    }
}

loki.source.docker "source_docker" {
    host       = "unix:///var/run/docker.sock"
    targets    = discovery.relabel.docker_logs.output
    labels     = {
        "source"   = "docker",
    }

    forward_to = [loki.write.loki.receiver]
}

otelcol.receiver.otlp "default" {
    http {}
    grpc {}

    output {
        metrics = [otelcol.processor.batch.default.input]
        logs    = [otelcol.processor.batch.default.input]
        traces  = [otelcol.processor.batch.default.input]
    }
}

otelcol.processor.batch "default" {
    output {
        metrics = [otelcol.processor.transform.metric.input]
        logs    = [otelcol.exporter.loki.default.input]
        traces  = [otelcol.exporter.otlp.default.input]
    }
}

otelcol.processor.transform "metric" {
    metric_statements {
        context = "datapoint"
        statements = [
            `set(attributes["service_name"], resource.attributes["service.name"])`,
        ]
    }

    output {
        metrics = [otelcol.exporter.prometheus.default.input]
    }
}

otelcol.exporter.prometheus "default" {
    forward_to = [prometheus.remote_write.default.receiver]
}

otelcol.exporter.loki "default" {
  forward_to = [loki.write.loki.receiver]
}

otelcol.exporter.otlp "default" {
    client {
        endpoint = "tempo:4317"
        tls {
            insecure = true
        }
    }
}

loki.write "loki" {
	endpoint {
		url = "http://loki:3100/loki/api/v1/push"
	}
}

prometheus.remote_write "default" {
  endpoint {
    url = "http://prometheus:9090/api/v1/write"
  }
}
